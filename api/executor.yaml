openapi: 3.0.1

info:
  title: testkube Executor API
  description: 'testkube Executor OpenAPI spec - testkube provides a Kubernetes-native framework for test definition, execution and results'
  contact:
    email: testkube@kubshop.io
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 1.0.0

externalDocs:
  description: 'Find out more about testkube'
  url: http://testkube.io

tags:
- name: executor
  description: 'scripts execution API' 

paths:
  /executions/:
    post:
      tags:
      - executor
      summary: 'Starts script execution'
      description: 'Starts script execution, returns pending execution with ID'
      operationId: executueScript
      requestBody:
        description: body passed to configure execution
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecutionRequest'
      responses:
        201:
          description: 'execution added to queue'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Execution'
        400:
          description: 'problem with request body'
          content:
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Problem'
        500:
          description: 'poblem with saving script details into queue'
          content:
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Problem'

  /executions/{id}:
    get:
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: 'ID of the execution'
      tags:
      - executor
      summary: 'Get execution by ID'
      description: 'Gets execution with given ID, returns deailed information about test execution'
      operationId: getExecution
      responses:
        200:
          description: 'successful operation'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Execution'
        500:
          description: 'problem with getting information from storage'
          content:
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Problem'

  
components:
  schemas:

    Execution:
      description: execution result returned from executor
      type: object
      properties:
        id:
          type: string
          description: execution id
          format: bson objectId
        script-content: 
          type: string
          description: script metadata content
        repository: 
          $ref: '#/components/schemas/Repository'
        params: 
          type: object
          description: 'execution params passed to executor'
          additionalProperties: 
            type: string
          example: 
            users: "3"
            prefix: "some-"
        status: 
          type: string
          description: 'execution status'
          enum: 
          - queued
          - pending 
          - success 
          - failed
        result: 
          $ref: '#/components/schemas/ExecutionResult'
        start-time:
          type: string
          description: 'test start time'
          format: date-time
        end-time:
          type: string
          description: 'test end time'
          format: date-time


    ExecutionResult:
      description: execution result data
      type: object
      properties:
        status: 
          type: string
          description: script execution status
          enum: [success, failed]
        raw-output:
          type: string
          description: 'RAW Script execution output, depends of reporter used in particular tool'
        raw-output-type:
          type: string
          description: 'output type depends of reporter used in partucular tool'
          enum: 
          - text/plain
          - application/junit+xml
          - application/json
        error-message: 
          type: string
          description: 'error message when status is failed, separate to output as output can be partial in case of error'
        start-time:
          type: string
          description: script execution start time
          format: date-time
        end-time:
          type: string
          description: script execution start time
          format: date-time
        steps: 
          type: array
          items:
            $ref: '#/components/schemas/ExecutionStepResult'
          description: execution steps (for collection of requests)

    ExecutionStepResult:
      description: execution result data
      type: object
      properties:
        name:
          type: string
          description: step name
        duration: 
          type: string 
          format: duration
        status: 
          type: string
          description: execution step status
          enum: [success, failed]
        assertionResults: 
          type: array
          items:
            $ref: '#/components/schemas/AssertionResult'
        
    AssertionResult:
      description: execution result data
      type: object
      properties:
        name: 
          type: string
        status:
          type: string
          enum: [success, failed]
        error-message: 
          type: string
          nullable: true



#
# Requests
#

    ExecutionRequest: 
      description: scripts execution request body
      type: object
      properties:
        type:
          type: string
          description: script type
          example: postaman/collection
        name:
          type: string
          description: script execution custom name
          example: testing with 1000 users
        params: 
          type: object
          description: 'execution params passed to executor'
          additionalProperties: 
            type: string
          example: 
            users: "3"
            prefix: "some-"
        content: 
          type: string
          description: script content as string (content depends from executor)
        input-type:
          type: string
          description: >
            script content type can be: 
            - direct content - created from file,
            - git repo directory checkout in case when test is some kind of project or have more than one file,
          enum:
            - content
            - git
        repository: 
          $ref: '#/components/schemas/Repository'



    Repository:
      description: scripts execution request body
      type: object
      required:
        - type
        - uri
        - branch
      properties:
        type:
          type: string
          enum:
            - git
          description: VCS repository type
        uri:
          type: string
          description: uri of content file or git directory
        branch:
          type: string
          description: branch/tag name for checkout
        path:
          type: string
          description: if needed we can checkout particular path (dir or file) in case of BIG/mono repositories

                
#
# Errors
#

    Problem: 
      description: problem response in case of error
      type: object
      properties:
        type:
          type: string
          description: Type contains a URI that identifies the problem type. This URI will,
          example: http://kubeshop.io/testkube/problems/invalid-script-name
        title:
          type: string
          description: Title is a short, human-readable summary of the problem type. This title SHOULD NOT change from occurrence to occurrence of the problem, except forpurposes of localization.
          example: Invalid script name
        status:
          type: integer
          description: HTTP status code for this occurrence of the problem.
          example: 500
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem.
          example: Your script name can't contain forbidden characters like "}}}" passed
        instance:
          type: string
          description: A URI that identifies the specific occurrence of the problem. This URI may or may not yield further information if de-referenced.
          example: http://10.23.23.123:8080/scripts