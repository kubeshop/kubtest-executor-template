// struct autogenerated from output file
// some fields could be missing
// example command newman run jw1.cypress_collection.json --reporters cli,json --reporter-json-export outputfile.json
package newman

type ExecutionJSONResult struct {
	Collection  Collection  `json:"collection"`
	Environment Environment `json:"environment"`
	Globals     Globals     `json:"globals"`
	Run         Run         `json:"run"`
}

type Collection struct {
	Metadata struct {
		CypressID string `json:"cypress_id"`
	} `json:"_"`
	Item     []Item        `json:"item"`
	Event    []interface{} `json:"event"`
	Variable []interface{} `json:"variable"`
	Info     Info          `json:"info"`
}

type Environment struct {
	ID     string        `json:"id"`
	Values []interface{} `json:"values"`
}

type Globals struct {
	ID     string        `json:"id"`
	Values []interface{} `json:"values"`
}

type Info struct {
	CypressID string `json:"_cypress_id"`
	Name      string `json:"name"`
	Schema    string `json:"schema"`
}

type Item struct {
	ID       string        `json:"id"`
	Name     string        `json:"name"`
	Request  Request       `json:"request"`
	Response []interface{} `json:"response"`
	Event    []Event       `json:"event"`
}

type Event struct {
	Listen string `json:"listen"`
	Script struct {
		ID              string   `json:"id"`
		Type            string   `json:"type"`
		Exec            []string `json:"exec"`
		LastExecutionID string   `json:"_lastExecutionId"`
	} `json:"script"`
}
type Run struct {
	Stats      RunStats    `json:"stats"`
	Timings    RunTimings  `json:"timings"`
	Executions []Execution `json:"executions"`
	Transfers  struct {
		ResponseTotal int `json:"responseTotal"`
	} `json:"transfers"`
	Failures []Failure `json:"failures"`
	Error    *RunError `json:"error,omitempty"`
}

type RunTimings struct {
	ResponseAverage  float64 `json:"responseAverage"`
	ResponseMin      int     `json:"responseMin"`
	ResponseMax      int     `json:"responseMax"`
	ResponseSd       float64 `json:"responseSd"`
	DNSAverage       int     `json:"dnsAverage"`
	DNSMin           int     `json:"dnsMin"`
	DNSMax           int     `json:"dnsMax"`
	DNSSd            int     `json:"dnsSd"`
	FirstByteAverage int     `json:"firstByteAverage"`
	FirstByteMin     int     `json:"firstByteMin"`
	FirstByteMax     int     `json:"firstByteMax"`
	FirstByteSd      int     `json:"firstByteSd"`
	Started          int64   `json:"started"`
	Completed        int64   `json:"completed"`
}

type RunError struct {
	Name    string `json:"name"`
	Index   int    `json:"index"`
	Test    string `json:"test"`
	Message string `json:"message"`
	Stack   string `json:"stack"`
}

type Failure struct {
	Error  FailureError `json:"error"`
	At     string       `json:"at"`
	Source struct {
		ID      string `json:"id"`
		Name    string `json:"name"`
		Request struct {
			URL struct {
				Protocol string        `json:"protocol"`
				Path     []string      `json:"path"`
				Host     []string      `json:"host"`
				Query    []interface{} `json:"query"`
				Variable []interface{} `json:"variable"`
			} `json:"url"`
			Method string `json:"method"`
		} `json:"request"`
		Response []interface{} `json:"response"`
		Event    []struct {
			Listen string `json:"listen"`
			Script struct {
				ID              string   `json:"id"`
				Type            string   `json:"type"`
				Exec            []string `json:"exec"`
				LastExecutionID string   `json:"_lastExecutionId"`
			} `json:"script"`
		} `json:"event"`
	} `json:"source"`
	Parent struct {
		Metadata struct {
			CypressID string `json:"cypress_id"`
		} `json:"_"`
		Item []struct {
			ID      string `json:"id"`
			Name    string `json:"name"`
			Request struct {
				URL struct {
					Protocol string        `json:"protocol"`
					Path     []string      `json:"path"`
					Host     []string      `json:"host"`
					Query    []interface{} `json:"query"`
					Variable []interface{} `json:"variable"`
				} `json:"url"`
				Method string `json:"method"`
			} `json:"request"`
			Response []interface{} `json:"response"`
			Event    []struct {
				Listen string `json:"listen"`
				Script struct {
					ID              string   `json:"id"`
					Type            string   `json:"type"`
					Exec            []string `json:"exec"`
					LastExecutionID string   `json:"_lastExecutionId"`
				} `json:"script"`
			} `json:"event"`
		} `json:"item"`
		Event    []interface{} `json:"event"`
		Variable []interface{} `json:"variable"`
		Info     struct {
			CypressID string `json:"_cypress_id"`
			Name      string `json:"name"`
			Schema    string `json:"schema"`
		} `json:"info"`
	} `json:"parent"`
	Cursor struct {
		Position      int    `json:"position"`
		Iteration     int    `json:"iteration"`
		Length        int    `json:"length"`
		Cycles        int    `json:"cycles"`
		Empty         bool   `json:"empty"`
		EOF           bool   `json:"eof"`
		Bof           bool   `json:"bof"`
		Cr            bool   `json:"cr"`
		Ref           string `json:"ref"`
		HTTPRequestID string `json:"httpRequestId"`
		ScriptID      string `json:"scriptId"`
		Execution     string `json:"execution"`
	} `json:"cursor"`
}

type FailureError struct {
	Name       string `json:"name"`
	Index      int    `json:"index"`
	Test       string `json:"test"`
	Message    string `json:"message"`
	Stack      string `json:"stack"`
	Checksum   string `json:"checksum"`
	ID         string `json:"id"`
	Timestamp  int64  `json:"timestamp"`
	Stacktrace []struct {
		FileName     string `json:"fileName"`
		LineNumber   int    `json:"lineNumber"`
		FunctionName string `json:"functionName"`
		TypeName     string `json:"typeName"`
		MethodName   string `json:"methodName"`
		ColumnNumber int    `json:"columnNumber"`
		Native       bool   `json:"native"`
	} `json:"stacktrace"`
}
type Execution struct {
	Cursor     ExecutionCursor `json:"cursor,omitempty"`
	Item       Item            `json:"item"`
	Request    Request         `json:"request"`
	Response   Response        `json:"response"`
	ID         string          `json:"id"`
	Assertions []Assertion     `json:"assertions"`
}

type Assertion struct {
	Assertion string    `json:"assertion"`
	Skipped   bool      `json:"skipped"`
	Error     *RunError `json:"error,omitempty"`
}

type Request struct {
	URL struct {
		Protocol string        `json:"protocol"`
		Path     []string      `json:"path"`
		Host     []string      `json:"host"`
		Query    []interface{} `json:"query"`
		Variable []interface{} `json:"variable"`
	} `json:"url"`
	Header []struct {
		Key    string `json:"key"`
		Value  string `json:"value"`
		System bool   `json:"system"`
	} `json:"header"`
	Method string `json:"method"`
}

type Response struct {
	ID     string `json:"id"`
	Status string `json:"status"`
	Code   int    `json:"code"`
	Header []struct {
		Key   string `json:"key"`
		Value string `json:"value"`
	} `json:"header"`
	Stream struct {
		Type string `json:"type"`
		Data []int  `json:"data"`
	} `json:"stream"`
	Cookie       []interface{} `json:"cookie"`
	ResponseTime int           `json:"responseTime"`
	ResponseSize int           `json:"responseSize"`
}
type ExecutionCursor struct {
	Position      int    `json:"position"`
	Iteration     int    `json:"iteration"`
	Length        int    `json:"length"`
	Cycles        int    `json:"cycles"`
	Empty         bool   `json:"empty"`
	EOF           bool   `json:"eof"`
	Bof           bool   `json:"bof"`
	Cr            bool   `json:"cr"`
	Ref           string `json:"ref"`
	HTTPRequestID string `json:"httpRequestId"`
}

type RunStats struct {
	Iterations        Stat `json:"iterations"`
	Items             Stat `json:"items"`
	Scripts           Stat `json:"scripts"`
	Prerequests       Stat `json:"prerequests"`
	Requests          Stat `json:"requests"`
	Tests             Stat `json:"tests"`
	Assertions        Stat `json:"assertions"`
	TestScripts       Stat `json:"testScripts"`
	PrerequestScripts Stat `json:"prerequestScripts"`
}
type Stat struct {
	Total   int `json:"total"`
	Pending int `json:"pending"`
	Failed  int `json:"failed"`
}
